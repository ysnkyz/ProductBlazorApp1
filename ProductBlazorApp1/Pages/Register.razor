@attribute [Authorize]
@* @page "/register"
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation

<h3>Yeni Kayıt</h3>

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <InputText @bind-Value="registerModel.Email" class="form-control" placeholder="E-posta" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="registerModel.Password" class="form-control" placeholder="Şifre" type="password" />
    </div>
    <div class="mb-3">
        <InputText @bind-Value="registerModel.ConfirmPassword" class="form-control" placeholder="Şifre (tekrar)" type="password" />
    </div>

    <button type="submit" class="btn btn-primary">Kayıt Ol</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-2">@errorMessage</div>
    }
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage;

    public class RegisterModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [MinLength(6)]
        public string Password { get; set; }

        [Compare(nameof(Password), ErrorMessage = "Şifreler uyuşmuyor.")]
        public string ConfirmPassword { get; set; }
    }

    private async Task HandleRegister()
    {
        var user = new ApplicationUser { UserName = registerModel.Email, Email = registerModel.Email };

        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            await SignInManager.SignInAsync(user, isPersistent: false);
            Navigation.NavigateTo(registerModel.Email.Equals("admin@gmail.com", StringComparison.OrdinalIgnoreCase) ? "/admin" : "/panel");
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }
}
 *@