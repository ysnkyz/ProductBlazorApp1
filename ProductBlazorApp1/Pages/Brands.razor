@page "/brands"
@attribute [Authorize(Roles = "Admin")]
@using ProductBlazorApp1.Models
@using ProductBlazorApp1.Data
@inject ApplicationDbContext db
@inject IJSRuntime JSRuntime

<h3>Marka Listesi</h3>

<!-- Marka Ekleme Formu -->
<EditForm Model="@newBrand" OnValidSubmit="@AddBrand">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="input-group mb-3">
        <InputText @bind-Value="newBrand.BrandName" class="form-control" placeholder="Yeni Marka Adı" />
        <button type="submit" class="btn btn-primary">Ekle</button>
    </div>
</EditForm>

<!-- Marka Listesi -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>#</th>
            <th>Marka Adı</th>
            <th>Sil</th>
        </tr>
    </thead>
    <tbody>
        @if (brands is not null)
        {
            @foreach (var brand in brands)
            {
                <tr>
                    <td>@brand.Id</td>
                    <td>@brand.BrandName</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteBrand(brand.Id))">
                            <i class="fas fa-trash"></i> Sil
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Brand> brands;
    private Brand newBrand = new Brand();

    protected override void OnInitialized()
    {
        LoadBrands();
    }

    private void LoadBrands()
    {
        brands = db.Brands.OrderBy(b => b.BrandName).ToList();
    }

    private async Task AddBrand()
    {
        if (!string.IsNullOrWhiteSpace(newBrand.BrandName))
        {
            db.Brands.Add(new Brand { BrandName = newBrand.BrandName.Trim() });
            db.SaveChanges();
            newBrand = new Brand();
            LoadBrands();

            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Başarılı!",
                text = "Marka eklendi.",
                icon = "success",
                confirmButtonText = "Tamam"
            });
        }
    }

    private async Task DeleteBrand(int id)
    {
        var brand = db.Brands.Find(id);
        if (brand != null)
        {
            db.Brands.Remove(brand);
            db.SaveChanges();
            LoadBrands();

            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Silindi!",
                text = "Marka başarıyla silindi.",
                icon = "success",
                confirmButtonText = "Tamam"
            });
        }
    }
}
