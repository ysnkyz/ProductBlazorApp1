@layout MainLayout
@page "/products"
@attribute [Authorize]
@using Microsoft.EntityFrameworkCore
@using ProductBlazorApp1.Models
@using ProductBlazorApp1.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity


@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager

@inject IJSRuntime JSRuntime


<h1 class="h3 mb-4 text-gray-800">Ürün Listesi</h1>

<!-- Ürün Kartları -->
<div class="container">
    <div class="row row-cols-1 row-cols-md-3 g-5 gx-5 gy-5">
        @for (int i = 0; i < products.Count; i++)
        {
            var product = products[i];
            string customClass = "";

            if (i % 3 == 0) // Sol kart
                customClass = "translate-left";
            else if (i % 3 == 2) // Sağ kart
                customClass = "translate-right";

            <div class="col mb-5">
                <div class="card h-100 shadow-lg border-0 rounded-3 bg-white @customClass">
                    <img src="@(!string.IsNullOrWhiteSpace(product.ImageUrl) ? product.ImageUrl : "https://via.placeholder.com/300x200?text=Görsel+Yok")"
                         class="card-img-top"
                         alt="@product.Name"
                         style="object-fit: cover; height: 200px;" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@product.Name</h5>
                        <h6 class="card-subtitle text-muted mb-2">@product.Brand?.BrandName</h6>
                        <p class="card-text mb-3">
                            <strong>Kategori:</strong> @product.Category?.CategoryName
                        </p>

                        <div class="mt-auto d-flex flex-wrap gap-2">
                            <a class="btn btn-sm btn-outline-primary flex-fill rounded-pill" href="/products/@product.Id">
                                <i class="bi bi-eye me-1"></i> Detay
                            </a>
                            @if (IsAdmin)
                            {
                                <a class="btn btn-sm btn-warning flex-fill rounded-pill" href="/products/edit/@product.Id">
                                    <i class="bi bi-pencil-square me-1"></i> Düzenle
                                </a>
                                <button class="btn btn-sm btn-danger flex-fill rounded-pill" @onclick="@(() => DeleteProduct(product.Id))">
                                    <i class="bi bi-trash me-1"></i> Sil
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Product>? products;
    private List<Brand> brands = new();
    private List<Category> categories = new();
    private Product newProduct = new();
    private bool showForm = false;
    private bool IsAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var currentUser = await UserManager.GetUserAsync(authState.User);
        if (currentUser != null)
        {
            var roles = await UserManager.GetRolesAsync(currentUser);
            IsAdmin = roles.Contains("Admin");
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        products = await DbContext.Products
            .Include(p => p.Brand)
            .Include(p => p.Category)
            .ToListAsync();

        brands = await DbContext.Brands.OrderBy(b => b.BrandName).ToListAsync();
        categories = await DbContext.Categories.OrderBy(c => c.CategoryName).ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (!IsAdmin)
            return;

        DbContext.Products.Add(newProduct);
        await DbContext.SaveChangesAsync();
        newProduct = new Product();
        showForm = false;
        await LoadData();
    }

    private async Task DeleteProduct(int id)
    {
        if (!IsAdmin)
            return;

        var product = await DbContext.Products.FindAsync(id);
        if (product != null)
        {
            DbContext.Products.Remove(product);
            await DbContext.SaveChangesAsync();
            await LoadData();

            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Silindi!",
                text = "Ürün başarıyla silindi.",
                icon = "success",
                confirmButtonText = "Tamam"
            });

        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Ürün bulunamadı.");
        }
    }
}
