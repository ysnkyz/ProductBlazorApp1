@* @page "/login"
@layout EmptyLayout
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILocalStorageService localStorage

@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using ProductBlazorApp1.Data

<PageTitle>Giriş Yap</PageTitle>

<div class="container">
	<div class="row justify-content-center">
		<div class="col-xl-10 col-lg-12 col-md-9">
			<div class="card o-hidden border-0 shadow-lg my-5">
				<div class="card-body p-0">
					<div class="row">
						<div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
						<div class="col-lg-6">
							<div class="p-5">
								<div class="text-center">
									<h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
								</div>

								<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" OnInvalidSubmit="@HandleInvalidLogin">
									<DataAnnotationsValidator />
									<ValidationSummary />
									<div class="form-group">
										<InputText @bind-Value="loginModel.Email" class="form-control form-control-user" placeholder="Enter Email Address..." />
									</div>
									<div class="form-group">
										<InputText @bind-Value="loginModel.Password" class="form-control form-control-user" placeholder="Password" type="password" />
									</div>
									<div class="form-group">
										<InputCheckbox @bind-Value="loginModel.RememberMe" class="custom-control-input" id="customCheck" />
										<label class="custom-control-label" for="customCheck">Remember Me</label>
									</div>
									<button type="submit" class="btn btn-primary btn-user btn-block">Giriş Yap</button>
								</EditForm>


								@if (!string.IsNullOrEmpty(errorMessage))
								{
									<div class="alert alert-danger mt-2">@errorMessage</div>
								}
								<hr>
								<div class="text-center">
									<a class="small" href="#">Şifremi Unuttum</a>
								</div>
								<div class="text-center">
									<a class="small" href="/register">Hesap oluştur!</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private LoginModel loginModel { get; set; } = new LoginModel();
	private string errorMessage;

	private string tokenKey = "token";

	public class LoginModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; }

		[Required]
		public string Password { get; set; }

		public bool RememberMe { get; set; }
	}


	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		var token = await localStorage.GetItemAsStringAsync(tokenKey);

		if (!string.IsNullOrEmpty(token))
		{
			Navigation.NavigateTo("/panel", forceLoad: true);
		}
	}

	private void HandleInvalidLogin()
	{
		errorMessage = "Lütfen tüm alanları doğru şekilde doldurun.";
	}

	private async Task HandleLogin()
	{
		errorMessage = string.Empty;

		if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
		{
			errorMessage = "E-posta ve şifre boş olamaz.";
			return;
		}

		var user = await UserManager.FindByEmailAsync(loginModel.Email);
		if (user == null)
		{
			errorMessage = "Kullanıcı bulunamadı.";
			return;
		}

		var result = await SignInManager.CheckPasswordSignInAsync(user, loginModel.Password, false);
		if (result.Succeeded)
		{
			var token = Guid.NewGuid();

			await localStorage.SetItemAsStringAsync(tokenKey, token.ToString());

			//user.SetToken(token);

			if (loginModel.Email.Equals("admin@gmail.com", StringComparison.OrdinalIgnoreCase))
				Navigation.NavigateTo("/admin", forceLoad: true);
			else
				Navigation.NavigateTo("/panel", forceLoad: true);
		}
		else
		{
			errorMessage = "Giriş başarısız. Şifreyi veya kullanıcıyı kontrol edin.";
		}
	}
}

 *@




@page "/login"
@layout EmptyLayout
@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using ProductBlazorApp1.Data

<PageTitle>Giriş Yap</PageTitle>

<div class="container">
	<div class="row justify-content-center">
		<div class="col-xl-10 col-lg-12 col-md-9">
			<div class="card o-hidden border-0 shadow-lg my-5">
				<div class="card-body p-0">
					<div class="row">
						<div class="col-lg-6 d-none d-lg-block bg-login-image"></div>
						<div class="col-lg-6">
							<div class="p-5">
								<div class="text-center">
									<h1 class="h4 text-gray-900 mb-4">Welcome Back!</h1>
								</div>

								<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
									<DataAnnotationsValidator />
									<ValidationSummary />
									<div class="form-group">
										<InputText @bind-Value="loginModel.Email" class="form-control form-control-user" placeholder="E-posta" />
									</div>
									<div class="form-group">
										<InputText @bind-Value="loginModel.Password" type="password" class="form-control form-control-user" placeholder="Şifre" />
									</div>
									<button type="submit" class="btn btn-primary btn-user btn-block">Giriş Yap</button>
								</EditForm>

								@if (!string.IsNullOrEmpty(errorMessage))
								{
									<div class="alert alert-danger mt-2">@errorMessage</div>
								}

								<hr />
								<div class="text-center">
									<a class="small" href="/register">Hesap Oluştur</a>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	private LoginModel loginModel = new();
	private string errorMessage;
	private string tokenKey = "token";
	private bool firstRender = true;

	public class LoginModel
	{
		[Required]
		[EmailAddress]
		public string Email { get; set; }

		[Required]
		public string Password { get; set; }
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				var token = await localStorage.GetItemAsStringAsync(tokenKey);
				if (!string.IsNullOrEmpty(token))
				{
					Navigation.NavigateTo("/panel", forceLoad: true);
				}
			}
			catch
			{
				// prerendering sırasında interop hatası oluşursa yoksay
			}
		}
	}

	private async Task HandleLogin()
	{
		errorMessage = string.Empty;

		var user = await UserManager.FindByEmailAsync(loginModel.Email);
		if (user == null)
		{
			errorMessage = "Kullanıcı bulunamadı.";
			return;
		}

		var result = await SignInManager.CheckPasswordSignInAsync(user, loginModel.Password, false);
		if (result.Succeeded)
		{
			var token = Guid.NewGuid().ToString();
			await localStorage.SetItemAsStringAsync(tokenKey, token);

			if (loginModel.Email.Equals("admin@gmail.com", StringComparison.OrdinalIgnoreCase))
				Navigation.NavigateTo("/admin", forceLoad: true);
			else
				Navigation.NavigateTo("/panel", forceLoad: true);
		}
		else
		{
			errorMessage = "Giriş başarısız. Bilgileri kontrol edin.";
		}
	}
}


