@using ProductBlazorApp1.Data
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject IJSRuntime JSRuntime

<!-- Topbar -->
<nav class="navbar navbar-expand navbar-light bg-white topbar mb-4 static-top shadow">

    <!-- Sidebar Toggle (Topbar) -->
    <button class="btn btn-link d-md-none rounded-circle mr-3" @onclick="ToggleSidebar">
        <i class="fa fa-bars"></i>
    </button>

    <!-- Topbar Navbar -->
    <ul class="navbar-nav ml-auto">
        <!-- Nav Item - User Information -->
        <li class="nav-item dropdown no-arrow">
            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="mr-2 d-none d-lg-inline text-gray-600 small">@displayName</span>
                <img class="img-profile rounded-circle"
                     src="img/undraw_profile.svg">
            </a>
            <!-- Dropdown - User Information -->
            <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in">
                <a class="dropdown-item" @onclick="logout">
                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                    Çıkış Yap
                </a>
            </div>
        </li>
    </ul>
</nav>
<!-- End of Topbar -->
@code {
    private string displayName = "Yükleniyor...";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user != null)
        {
            var roles = await UserManager.GetRolesAsync(user);
            displayName = roles.Contains("Admin") ? "Admin" : user.UserName ?? "Kullanıcı";
        }
        else
        {
            displayName = "Misafir";
        }
    }

    private async Task logout()
    {
        await localStorage.RemoveItemAsync("token");
        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private async Task ToggleSidebar()
    {
        await JSRuntime.InvokeVoidAsync("eval", @"
            document.body.classList.toggle('sidebar-toggled');
            const sidebar = document.getElementById('accordionSidebar');
            if (sidebar) {
                sidebar.classList.toggle('toggled');
            }
        ");
    }
}
